{"version":3,"sources":["appRedux/actions/Users.js","routes/Admin/Users/admins/allUsers/index.js","routes/Admin/Users/admins/newUser/index.js","routes/Admin/Users/admins/singleUser/index.js","routes/Admin/Users/admins/index.js"],"names":["__webpack_require__","d","__webpack_exports__","getAdminUsers","getUsers","addAdminUser","_constants_ActionTypes__WEBPACK_IMPORTED_MODULE_0__","util_Api__WEBPACK_IMPORTED_MODULE_1__","dispatch","type","FETCH_START","axios","get","then","_ref","data","FETCH_SUCCESS","LIST_USER_SUCCESS","ALL_USERS_DATA","payload","console","log","error","FETCH_ERROR","catch","message","_ref2","_ref3","name","email","phone","post","_ref4","CREATE_USER_SUCCESS","columns","title","dataIndex","key","width","render","text","react_default","a","createElement","className","record","icon","showHeader","scroll","y","pagination","position","Users","state","size","rowSelection","componentDidMount","_this","props","handleSizeChange","e","setState","target","value","handleShowForm","visible","handleOk","confirmLoading","setTimeout","handleCancel","CreateNew","Link","to","es_button","onClick","IntlMessages","id","_this$props","this","loading","allUsers","card","extra","table","Object","assign","rowKey","dataSource","Component","connect","auth","userData","commonData","token","listSuccess","FormItem","Form","Item","NewUser","confirmDirty","autoCompleteResult","handleSubmit","preventDefault","form","validateFieldsAndScroll","err","values","handleConfirmBlur","openNotification","notification","description","goBack","history","GoBack","getFieldDecorator","createSuccess","Redirect","formItemLayout","labelCol","xs","span","sm","wrapperCol","spin","spinning","es_form","layout","onSubmit","label","tooltip","rules","required","whitespace","input","style","offset","htmlType","RegistrationForm","create","Option","Select","AutoCompleteOption","AutoComplete","residences","children","SingleClient","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","map","domain","concat","tailFormItemLayout","prefixSelector","initialValue","es_select","websiteOptions","website","singleUser_FormItem","validator","onBlur","cascader","options","addonBefore","auto_complete","onChange","placeholder","row","col","valuePropName","es_checkbox","Admins","match","Switch","Route","exact","path","url","component","AllUsers","SingleUser"],"mappings":"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","file":"static/js/15.4ffa8e55.chunk.js","sourcesContent":["/*jshint esversion: 9 */\n\n// eslint-disable-next-line \nimport {\n  FETCH_ERROR,\n  FETCH_START,\n  FETCH_SUCCESS,\n  INIT_URL,\n  CREATE_USER_SUCCESS,\n  LIST_USER_SUCCESS,\n  ALL_USERS_DATA\n} from \"../../constants/ActionTypes\";\nimport axios from 'util/Api';\n\nexport const setInitUrl = (url) => {\n  return {\n    type: INIT_URL,\n    payload: url\n  };\n};\n\nexport const getAdminUsers = () => {\n  return (dispatch) => {\n    dispatch({type: FETCH_START});\n    axios.get('admin/admins', \n    ).then(({data}) => {\n      if (data.data) {\n        // console.log(data)\n        dispatch({type: FETCH_SUCCESS});\n        dispatch({type: LIST_USER_SUCCESS});\n        dispatch({type: ALL_USERS_DATA, payload: data.data});\n      } else {\n        console.log(\"payload: data.error\", data.error);\n        dispatch({type: FETCH_ERROR, payload: \"Network Error\"});\n      }\n    }).catch(function (error) {\n      dispatch({type: FETCH_ERROR, payload: error.message});\n      console.log(\"Error****:\", error.message);\n    });\n  }\n};\n\nexport const getUsers = () => {\n  return (dispatch) => {\n    dispatch({type: FETCH_START});\n    axios.get('admin/users', \n    ).then(({data}) => {\n      if (data.data) {\n        // console.log(data)\n        dispatch({type: FETCH_SUCCESS});\n        dispatch({type: LIST_USER_SUCCESS});\n        dispatch({type: ALL_USERS_DATA, payload: data.data});\n      } else {\n        console.log(\"payload: data.error\", data.error);\n        dispatch({type: FETCH_ERROR, payload: \"Network Error\"});\n      }\n    }).catch(function (error) {\n      dispatch({type: FETCH_ERROR, payload: error.message});\n      console.log(\"Error****:\", error.message);\n    });\n  }\n};\n\nexport const addAdminUser = ({name, email, phone}) => {\n  return (dispatch) => {\n    dispatch({type: FETCH_START});\n    axios.post('admin/admins', {\n        name, email, phone\n      }\n    ).then(({data}) => {\n      if (data) {\n        dispatch({type: FETCH_SUCCESS});\n        dispatch({type: CREATE_USER_SUCCESS});\n        // dispatch({type: USER_TOKEN_SET, payload: data.token.access_token});\n        // dispatch({type: USER_DATA, payload: data.user});\n      } else {\n        console.log(\"payload: data.error\", data.error);\n        dispatch({type: FETCH_ERROR, payload: \"Network Error\"});\n      }\n    }).catch(function (error) {\n      dispatch({type: FETCH_ERROR, payload: error.message});\n      console.log(\"Error****:\", error.message);\n    });\n  };\n};\n\n// export const userSignIn = ({email, password}) => {\n//   return (dispatch) => {\n//     dispatch({type: FETCH_START});\n//     axios.post('auth/login', {\n//         email: email,\n//         password: password,\n//       }\n//     ).then(({data}) => {\n//       console.log(\"userSignIn: \", data);\n//       if (data.result) {\n//         localStorage.setItem(\"token\", JSON.stringify(data.token.access_token));\n//         axios.defaults.headers.common['access-token'] = \"Bearer \" + data.token.access_token;\n//         dispatch({type: FETCH_SUCCESS});\n//         dispatch({type: USER_TOKEN_SET, payload: data.token.access_token});\n//       } else {\n//         dispatch({type: FETCH_ERROR, payload: data.error});\n//       }\n//     }).catch(function (error) {\n//       dispatch({type: FETCH_ERROR, payload: error.message});\n//       console.log(\"Error****:\", error.message);\n//     });\n//   }\n// };\n\n// export const getUser = () => {\n//   return (dispatch) => {\n//     dispatch({type: FETCH_START});\n//     axios.post('auth/me',\n//     ).then(({data}) => {\n//       console.log(\"userSignIn: \", data);\n//       if (data) {\n//         dispatch({type: FETCH_SUCCESS});\n//         dispatch({type: USER_DATA, payload: data});\n//       } else {\n//         dispatch({type: FETCH_ERROR, payload: data.error});\n//       }\n//     }).catch(function (error) {\n//       dispatch({type: FETCH_ERROR, payload: error.message});\n//       console.log(\"Error****:\", error.message);\n//     });\n//   }\n// };","/*jshint esversion: 9 */\n\nimport React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\n// eslint-disable-next-line\nimport {Button, Card, Icon, Table} from \"antd\";\n\nimport IntlMessages from \"../../../../../util/IntlMessages\";\nimport {getAdminUsers} from \"../../../../../appRedux/actions/Users\";\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name',\n  width: 250,\n  render: text => <span className=\"gx-link\">{text}</span>,\n}, {\n  title: 'Email',\n  dataIndex: 'email',\n  key: 'email',\n  width: 200,\n}, {\n  title: 'Phone',\n  dataIndex: 'phone',\n  key: 'phone',\n  width: 150,\n}, {\n  title: 'Type',\n  dataIndex: 'role',\n  key: 'role',\n  width: 100,\n}, {\n  title: 'Action',\n  key: 'action',\n  width: 200,\n  render: (text, record) => (\n    <span>\n      <span className=\"gx-link ant-dropdown-link\">\n        Actions <Icon type=\"down\"/>\n      </span>\n    </span>\n  ),\n}];\n\n// const expandedRowRender = record => <p>{record.description}</p>;\nconst showHeader = true;\nconst scroll = {y: 440};\nconst pagination = {position: 'bottom'};\n\nclass Users extends Component {\n  state = {\n    pagination,\n    size: 'middle',\n    showHeader,\n    rowSelection: {},\n    scroll,\n  };\n\n  componentDidMount = () =>\n  {\n    this.props.getAdminUsers();\n  }\n\n  handleSizeChange = (e) => {\n    this.setState({size: e.target.value});\n  };\n\n  handleShowForm = (e) => {\n    this.setState({\n      visible: true,\n    });\n  };\n  handleOk = () => {\n    this.setState({\n      confirmLoading: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      });\n    }, 2000);\n  };\n  handleCancel = () => {\n    console.log('Clicked cancel button');\n    this.setState({\n      visible: false,\n    });\n  };\n\n  CreateNew = (\n    <Link to=\"/users/new\">\n      <Button type=\"primary\" size=\"default\" icon=\"add\" onClick={this.handleShowForm}>\n        <IntlMessages id=\"sidebar.users.new\"/>\n      </Button>\n    </Link>\n  );\n\n  render() {\n    const {loading, allUsers} = this.props;\n    return (\n      <div>\n        <Card className=\"gx-card\" title=\"Admin Users\" extra={this.CreateNew}>\n          <Table className=\"gx-table-responsive\" {...this.state} loading={loading} rowKey=\"id\" columns={columns} dataSource={allUsers}/>\n        </Card>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({auth, userData, commonData}) => {\n  const {token} = auth;\n  const {listSuccess, allUsers} = userData;\n  const {loading} = commonData;\n  return {token, listSuccess, loading, allUsers};\n};\n\nexport default connect(mapStateToProps, {getAdminUsers})(Users);","/*jshint esversion: 9 */\nimport React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\nimport {Button, Card, Form, Icon, Input, Tooltip, Spin, notification} from \"antd\";\n\nimport IntlMessages from \"../../../../../util/IntlMessages\";\nimport {addAdminUser} from \"../../../../../appRedux/actions/Users\";\n\nconst FormItem = Form.Item;\n\nclass NewUser extends Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) { \n          this.props.addAdminUser(values);\n        }\n      });\n    }\n    handleConfirmBlur = (e) => {\n      const value = e.target.value;\n      this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    }\n\n    openNotification = (type) => {\n      notification[type]({\n        message: 'Admin User Created',\n        description: 'User created and has been notified.'\n      });\n    };\n\n    goBack = () => {\n      this.props.history.goBack()\n    };\n\n    GoBack = (\n      <Button type=\"primary\" size=\"default\" icon=\"add\" onClick={this.goBack}>\n          <IntlMessages id=\"sidebar.cancel\"/>\n        </Button>\n    );\n  \n    render() {\n      const {getFieldDecorator} = this.props.form;\n      const {createSuccess, loading} = this.props;\n      if (createSuccess) {\n          this.openNotification('success')\n          return ( <Redirect to={'/users'}/> );\n      }\n      const formItemLayout = {\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 5},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 14},\n        },\n      };\n      const tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 20,\n          },\n          sm: {\n            span:24,\n            offset: 20,\n          },\n        },\n      };\n      \n      return (\n        <Spin spinning={loading}>\n          <Card className=\"gx-card\" title=\"New User\" extra={this.GoBack}>\n            <br />\n            <Form layout=\"horizontal\" onSubmit={this.handleSubmit}>\n              {/* <FormItem\n                {...formItemLayout}\n                label={(\n                  <span>\n                    Type&nbsp;\n                    <Tooltip title=\"Admin?, Client? or Vendor?\">\n                    <Icon type=\"question-circle-o\"/>\n                  </Tooltip>\n                </span>\n                )}\n              >\n                {getFieldDecorator('user_type', {\n                  rules: [{required: true, message: 'You must select a user type!', whitespace: true}],\n                })(\n                  <Select\n                    showSearch\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n                  >\n                    <Option value=\"jack\">Client</Option>\n                    <Option value=\"lucy\">Vendor</Option>\n                    <Option value=\"tom\">Admin</Option>\n                  </Select>\n                )}\n              </FormItem> */}\n              <FormItem\n                {...formItemLayout}\n                label={(\n                  <span>\n                    Name&nbsp;\n                    <Tooltip title=\"What is the name of the primary user?\">\n                    <Icon type=\"question-circle-o\"/>\n                  </Tooltip>\n                </span>\n                )}\n              >\n                {getFieldDecorator('name', {\n                  rules: [{required: true, message: 'You must enter a name!', whitespace: true}],\n                })(\n                  <Input/>\n                )}\n              </FormItem>\n              <FormItem\n                {...formItemLayout}\n                label=\"E-mail\"\n              >\n                {getFieldDecorator('email', {\n                  rules: [{\n                    type: 'email', message: 'The input is not valid E-mail!',\n                  }, {\n                    required: true, message: 'Please input user E-mail!',\n                  }],\n                })(\n                  <Input id=\"email1\"/>\n                )}\n              </FormItem>\n              <FormItem\n                {...formItemLayout}\n                label=\"Phone Number\"\n              >\n                {getFieldDecorator('phone', {\n                  rules: [{required: true, message: 'Please input user phone number!'}],\n                })(\n                  <Input style={{width: '100%'}}/>\n                )}\n              </FormItem>\n              <br />\n              <FormItem {...tailFormItemLayout}>\n                <Button type=\"primary\" htmlType=\"submit\">Submit</Button>\n              </FormItem>\n            </Form>\n          </Card>\n        </Spin>\n      );\n    }\n  \n  }\n  \nconst RegistrationForm = Form.create()(NewUser);\n// export default RegistrationForm;\n\nconst mapStateToProps = ({auth, userData, commonData}) => {\n  const {token} = auth;\n  const {createSuccess} = userData;\n  const {loading} = commonData;\n  return {token, createSuccess, loading};\n};\n\nexport default connect(mapStateToProps, {addAdminUser})(RegistrationForm);\n","/*jshint esversion: 9 */\nimport React, {Component} from \"react\";\nimport {AutoComplete, Button, Card, Cascader, Checkbox, Col, Form, Icon, Input, Row, Select, Tooltip} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [{\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [{\n      value: 'hangzhou',\n      label: 'Hangzhou',\n      children: [{\n        value: 'xihu',\n        label: 'West Lake',\n      }],\n    }],\n  }, {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [{\n      value: 'nanjing',\n      label: 'Nanjing',\n      children: [{\n        value: 'zhonghuamen',\n        label: 'Zhong Hua Men',\n      }],\n    }],\n}];\n\n\nclass SingleClient extends Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n    handleSubmit = (e) => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    }\n    handleConfirmBlur = (e) => {\n      const value = e.target.value;\n      this.setState({confirmDirty: this.state.confirmDirty || !!value});\n    }\n    compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    }\n    validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {force: true});\n      }\n      callback();\n    }\n    handleWebsiteChange = (value) => {\n      let autoCompleteResult;\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n      }\n      this.setState({autoCompleteResult});\n    }\n  \n    render() {\n      const {getFieldDecorator} = this.props.form;\n      const {autoCompleteResult} = this.state;\n  \n      const formItemLayout = {\n        labelCol: {\n          xs: {span: 24},\n          sm: {span: 8},\n        },\n        wrapperCol: {\n          xs: {span: 24},\n          sm: {span: 16},\n        },\n      };\n      const tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0,\n          },\n          sm: {\n            span: 16,\n            offset: 8,\n          },\n        },\n      };\n      const prefixSelector = getFieldDecorator('prefix', {\n        initialValue: '86',\n      })(\n        <Select style={{width: 70}}>\n          <Option value=\"86\">+86</Option>\n          <Option value=\"87\">+87</Option>\n        </Select>\n      );\n  \n      const websiteOptions = autoCompleteResult.map(website => (\n        <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n      ));\n  \n      return (\n        <Card className=\"gx-card\" title=\"Create New Client\">\n          <Form onSubmit={this.handleSubmit}>\n            <FormItem\n              {...formItemLayout}\n              label=\"E-mail\"\n            >\n              {getFieldDecorator('email', {\n                rules: [{\n                  type: 'email', message: 'The input is not valid E-mail!',\n                }, {\n                  required: true, message: 'Please input your E-mail!',\n                }],\n              })(\n                <Input id=\"email1\"/>\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Password\"\n            >\n              {getFieldDecorator('password', {\n                rules: [{\n                  required: true, message: 'Please input your password!',\n                }, {\n                  validator: this.validateToNextPassword,\n                }],\n              })(\n                <Input type=\"password\"/>\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Confirm Password\"\n            >\n              {getFieldDecorator('confirm', {\n                rules: [{\n                  required: true, message: 'Please confirm your password!',\n                }, {\n                  validator: this.compareToFirstPassword,\n                }],\n              })(\n                <Input type=\"password\" onBlur={this.handleConfirmBlur}/>\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label={(\n                <span>\n                Nickname&nbsp;\n                  <Tooltip title=\"What do you want others to call you?\">\n                  <Icon type=\"question-circle-o\"/>\n                </Tooltip>\n              </span>\n              )}\n            >\n              {getFieldDecorator('nickname', {\n                rules: [{required: true, message: 'Please input your nickname!', whitespace: true}],\n              })(\n                <Input/>\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Habitual Residence\"\n            >\n              {getFieldDecorator('residence', {\n                initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n                rules: [{type: 'array', required: true, message: 'Please select your habitual residence!'}],\n              })(\n                <Cascader options={residences}/>\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Phone Number\"\n            >\n              {getFieldDecorator('phone', {\n                rules: [{required: true, message: 'Please input your phone number!'}],\n              })(\n                <Input addonBefore={prefixSelector} style={{width: '100%'}}/>\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Website\"\n            >\n              {getFieldDecorator('website', {\n                rules: [{required: true, message: 'Please input website!'}],\n              })(\n                <AutoComplete\n                  dataSource={websiteOptions}\n                  onChange={this.handleWebsiteChange}\n                  placeholder=\"website\"\n                >\n                  <Input/>\n                </AutoComplete>\n              )}\n            </FormItem>\n            <FormItem\n              {...formItemLayout}\n              label=\"Captcha\"\n              extra=\"We must make sure that your are a human.\"\n            >\n              <Row>\n                <Col span={24} sm={12}>\n                  {getFieldDecorator('captcha', {\n                    rules: [{required: true, message: 'Please input the captcha you got!'}],\n                  })(\n                    <Input/>\n                  )}\n                </Col>\n                <Col span={24} sm={12}>\n                  <Button>Get captcha</Button>\n                </Col>\n              </Row>\n            </FormItem>\n            <FormItem {...tailFormItemLayout}>\n              {getFieldDecorator('agreement', {\n                valuePropName: 'checked',\n              })(\n                <Checkbox>I have read the <span className=\"gx-link\">agreement</span></Checkbox>\n              )}\n            </FormItem>\n            <FormItem {...tailFormItemLayout}>\n              <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n            </FormItem>\n          </Form>\n        </Card>\n      );\n    }\n  }\n\n  \nexport default SingleClient;\n\n","/*jshint esversion: 9 */\n\nimport React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\n\nimport AllUsers from \"./allUsers\";\nimport NewUser from \"./newUser\";\nimport SingleUser from \"./singleUser\";\n\nconst Admins = ({match}) => (\n  <Switch>\n    <Route exact path={`${match.url}/`} component={AllUsers}/>\n    <Route path={`${match.url}/new`} component={NewUser}/>\n    <Route path={`${match.url}/single`} component={SingleUser}/>\n  </Switch>\n);\n\nexport default Admins;\n"],"sourceRoot":""}